; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI
;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
;autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on https://issues.asterisk.org. We have made good progress in providing
; something compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
;#include filename.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=DAHDI/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/G2					; Trunk interface
;
; Note the 'G2' in the TRUNK variable above. It specifies which group (defined
; in chan_dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use
; in the specified group. The four possible options are:
;
; g: select the lowest-numbered non-busy DAHDI channel
;    (aka. ascending sequential hunt group).
; G: select the highest-numbered non-busy DAHDI channel
;    (aka. descending sequential hunt group).
; r: use a round-robin search, starting at the next highest channel than last
;    time (aka. ascending rotary hunt group).
; R: use a round-robin search, starting at the next lowest channel than last
;    time (aka. descending rotary hunt group).
;
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;FREENUMDOMAIN=mydomain.com                     ; domain to send on outbound
                                                ; freenum calls (uses outbound-freenum
                                                ; context)

;
; WARNING WARNING WARNING WARNING
; If you load any other extension configuration engine, such as pbx_ael.so,
; your global variables may be overridden by that file.  Please take care to
; use only one location to set global variables, and you will likely save
; yourself a ton of grief.
; WARNING WARNING WARNING WARNING
;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example, the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must always start
; with 1 to be considered a valid extension.  The priority "next" or "n" means
; the previous priority plus one, regardless of whether the previous priority
; was associated with the current extension or not.  The priority "same" or "s"
; means the same as the previously specified priority, again regardless of
; whether the previous entry was for the same extension.  Priorities may be
; immediately followed by a plus sign and another integer to add that amount
; (most useful with 's' or 'n').  Priorities may then also have an alias, or
; label, in parentheses after their name which can be used in goto situations.
;
; Contexts contain several lines, one for each step of each extension.  One may
; include another context in the current one as well, optionally with a date
; and time.  Included contexts are included in the order they are listed.
; Switches may also be included within a context.  The order of matching within
; a context is always exact extensions, pattern match extensions, includes, and
; switches.  Includes are always processed depth-first.  So for example, if you
; would like a switch "A" to match before context "B", simply put switch "A" in
; an included context "C", where "C" is included in your original context
; before "B".
;
;[context]
;
;autohints = yes
; If enabled for a context, a device state hint will be automatically created in
; the context with the name of the device and updated with device state changes.
;
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;
; Timing list for includes is
;
;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;include => daytime,9:00-17:00,mon-fri,*,*
;include => weekend,*,sat-sun,*,*
;include => weeknights,17:02-8:58,mon-fri,*,*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon receipt
; of a particular pattern.  The most commonly used example is of course '9'
; like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.  Please note that ignorepat
; only works with channels which receive dialtone from the PBX, such as DAHDI,
; Phone, and VPB.  Other channels, such as SIP and MGCP, which generate their
; own dialtone and converse with the PBX only after a number is complete, are
; generally unaffected by ignorepat (unless DISA or another method is used to
; generate a dialtone after answering the channel).
;

;
; Sample entries for extensions.conf
;
;
[dundi-e164-canonical]
;include => stdexten
;
; List canonical entries here
;
;exten => 12564286000,1,Gosub(6000,stdexten(IAX2/foo))
;exten => 12564286000,n,Goto(default,s,1)	; exited Voicemail
;exten => _125642860XX,1,Dial(IAX2/otherbox/${EXTEN:7})

[dundi-e164-customers]
;
; If you are an ITSP or Reseller, list your customers here.
;
;exten => _12564286000,1,Dial(SIP/customer1)
;exten => _12564286001,1,Dial(IAX2/customer2)

[dundi-e164-via-pstn]
;
; If you are freely delivering calls to the PSTN, list them here
;
;exten => _1256428XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Expose all of 256-428
;exten => _1256325XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Ditto for 256-325

[dundi-e164-local]
;
; Context to put your dundi IAX2 or SIP user in for
; full access
;
include => dundi-e164-canonical
include => dundi-e164-customers
include => dundi-e164-via-pstn

[dundi-e164-switch]
;
; Just a wrapper for the switch
;
switch => DUNDi/e164

[dundi-e164-lookup]
;
; Locally to lookup, try looking for a local E.164 solution
; then try DUNDi if we don't have one.
;
include => dundi-e164-local
include => dundi-e164-switch
;
; DUNDi can also be implemented as a Macro instead of using
; the Local channel driver.
;
[macro-dundi-e164]
;
; ARG1 is the extension to Dial
;
; Extension "s" is not a wildcard extension that matches "anything".
; In macros, it is the start extension. In most other cases,
; you have to goto "s" to execute that extension.
;
; Note: In old versions of Asterisk the PBX in some cases defaulted to
; extension "s" when a given extension was wrong (like in AMI originate).
; This is no longer the case.
;
; For wildcard matches, see above - all pattern matches start with
; an underscore.
exten => s,1,Goto(${ARG1},1)
include => dundi-e164-lookup

;
; Here are the entries you need to participate in the IAXTEL
; call routing system.  Most IAXTEL numbers begin with 1-700, but
; there are exceptions.  For more information, and to sign
; up, please go to www.gnophone.com or www.iaxtel.com
;
[iaxtel700]
exten => _91700XXXXXXX,1,Dial(IAX2/${GLOBAL(IAXINFO)}@iaxtel.com/${EXTEN:1}@iaxtel)

;
; The SWITCH statement permits a server to share the dialplan with
; another server. Use with care: Reciprocal switch statements are not
; allowed (e.g. both A -> B and B -> A), and the switched server needs
; to be on-line or else dialing can be severly delayed.
;
[iaxprovider]
;switch => IAX2/user:[key]@myserver/mycontext

[trunkint]
;
; International long distance through trunk
;
exten => _9011.,1,Macro(dundi-e164,${EXTEN:4})
exten => _9011.,n,Dial(${GLOBAL(TRUNK)}/${FILTER(0-9,${EXTEN:${GLOBAL(TRUNKMSD)}})})

[trunkld]
;
; Long distance context accessed through trunk
;
exten => _91NXXNXXXXXX,1,Macro(dundi-e164,${EXTEN:1})
exten => _91NXXNXXXXXX,n,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunklocal]
;
; Local seven-digit dialing accessed through trunk interface
;
exten => _9NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunktollfree]
;
; Long distance context accessed through trunk interface
;
exten => _91800NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91888NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91877NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91866NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[international]
;
; Master context for international long distance
;
ignorepat => 9
include => longdistance
include => trunkint

[longdistance]
;
; Master context for long distance
;
ignorepat => 9
include => local
include => trunkld

[local]
;
; Master context for local, toll-free, and iaxtel calls only
;
ignorepat => 9
include => default
include => trunklocal
include => iaxtel700
include => trunktollfree
include => iaxprovider

;Include parkedcalls (or the context you define in features conf)
;to enable call parking.
include => parkedcalls
;
; You can use an alternative switch type as well, to resolve
; extensions that are not known here, for example with remote
; IAX switching you transparently get access to the remote
; Asterisk PBX
;
; switch => IAX2/user:password@bigserver/local
;
; An "lswitch" is like a switch but is literal, in that
; variable substitution is not performed at load time
; but is passed to the switch directly (presumably to
; be substituted in the switch routine itself)
;
; lswitch => Loopback/12${EXTEN}@othercontext
;
; An "eswitch" is like a switch but the evaluation of
; variable substitution is performed at runtime before
; being passed to the switch routine.
;
; eswitch => IAX2/context@${CURSERVER}

; The following two contexts are a template to enable the ability to dial
; ISN numbers. For more information about what an ISN number is, please see
; http://www.freenum.org.
;
; This is the dialing hook.  use:
; include => outbound-freenum

[outbound-freenum]
; We'll add more digits as needed. The purpose is to dial things
; like extension numbers at domains (ITAD number) so we're matching
; on lengths of 1 through 6 prior to the separator (the asterisk [*])
;
exten => _X*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)

[outbound-freenum2]
; This is the handler which performs the dialing logic. It is called
; from the [outbound-freenum] context
;
exten => _X!,1,Verbose(2,Performing ISN lookup for ${EXTEN})
same => n,Set(SUFFIX=${CUT(EXTEN,*,2-)})                                ; make sure the suffix is all digits as well
same => n,GotoIf($["${FILTER(0-9,${SUFFIX})}" != "${SUFFIX}"]?fn-CONGESTION,1)
                                                                        ; filter out bad characters per the README-SERIOUSLY.best-practices.txt document
same => n,Set(TIMEOUT(absolute)=10800)
same => n,Set(isnresult=${ENUMLOOKUP(${EXTEN},sip,,1,freenum.org)})     ; perform our lookup with freenum.org
same => n,GotoIf($["${isnresult}" != ""]?from)
same => n,Set(DIALSTATUS=CONGESTION)
same => n,Goto(fn-CONGESTION,1)
same => n(from),Set(__SIPFROMUSER=${CALLERID(num)})
same => n,GotoIf($["${GLOBAL(FREENUMDOMAIN)}" = ""]?dial)               ; check if we set the FREENUMDOMAIN global variable in [global]
same => n,Set(__SIPFROMDOMAIN=${GLOBAL(FREENUMDOMAIN)})                 ;    if we did set it, then we'll use it for our outbound dialing domain
same => n(dial),Dial(SIP/${isnresult},40)
same => n,Goto(fn-${DIALSTATUS},1)

exten => fn-BUSY,1,Busy()

exten => _f[n]-.,1,NoOp(ISN: ${DIALSTATUS})
same => n,Congestion()

[macro-trunkdial]
;
; Standard trunk dial macro (hangs up on a dialstatus that should
; terminate call)
;   ${ARG1} - What to dial
;
exten => s,1,Dial(${ARG1})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-NOANSWER,1,Hangup()
exten => s-BUSY,1,Hangup()
exten => _s-.,1,NoOp

[stdexten]
;
; Standard extension subroutine:
;   ${EXTEN} - Extension
;   ${ARG1} - Device(s) to ring
;   ${ARG2} - Optional context in Voicemail
;
; Note that the current version will drop through to the next priority in the
; case of their pressing '#'.  This gives more flexibility in what do to next:
; you can prompt for a new extension, or drop the call, or send them to a
; general delivery mailbox, or...
;
; The use of the LOCAL() function is purely for convenience.  Any variable
; initially declared as LOCAL() will disappear when the innermost Gosub context
; in which it was declared returns.  Note also that you can declare a LOCAL()
; variable on top of an existing variable, and its value will revert to its
; previous value (before being declared as LOCAL()) upon Return.
;
exten => _X.,50000(stdexten),NoOp(Start stdexten)
exten => _X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _X.,n,Set(LOCAL(dev)=${ARG1})
exten => _X.,n,Set(LOCAL(cntx)=${ARG2})
exten => _X.,n,Set(LOCAL(mbx)=${ext}${IF($[!${ISNULL(${cntx})}]?@${cntx})})
exten => _X.,n,Dial(${dev},20)				; Ring the interface, 20 seconds maximum
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})			; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[stdPrivacyexten]
;
; Standard extension subroutine:
;   ${ARG1} - Extension
;   ${ARG2} - Device(s) to ring
;   ${ARG3} - Optional DONTCALL context name to jump to (assumes the s,1 extension-priority)
;   ${ARG4} - Optional TORTURE context name to jump to (assumes the s,1 extension-priority)`
;   ${ARG5} - Context in voicemail (if empty, then "default")
;
; See above note in stdexten about priority handling on exit.
;
exten => _X.,60000(stdPrivacyexten),NoOp(Start stdPrivacyexten)
exten => _X.,n,Set(LOCAL(ext)=${ARG1})
exten => _X.,n,Set(LOCAL(dev)=${ARG2})
exten => _X.,n,Set(LOCAL(dontcntx)=${ARG3})
exten => _X.,n,Set(LOCAL(tortcntx)=${ARG4})
exten => _X.,n,Set(LOCAL(cntx)=${ARG5})

exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
exten => _X.,n,Dial(${dev},20,p)			; Ring the interface, 20 seconds maximum, call screening
						; option (or use P for databased call _X.creening)
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,VoiceMail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,NoOp(Finish stdPrivacyexten NOANSWER)
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,VoiceMail(${mbx},b)		; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,NoOp(Finish stdPrivacyexten BUSY)
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => stdexten-DONTCALL,1,Goto(${dontcntx},s,1)	; Callee chose to send this call to a polite "Don't call again" script.

exten => stdexten-TORTURE,1,Goto(${tortcntx},s,1)	; Callee chose to send this call to a telemarketer torture script.

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoiceMailMain(${mbx})		; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[macro-page]
;
; Paging macro:
;
;       Check to see if SIP device is in use and DO NOT PAGE if they are
;
;   ${ARG1} - Device to page

exten => s,1,ChanIsAvail(${ARG1},s)			; s is for ANY call
exten => s,n,GotoIf($[${AVAILSTATUS} = "1"]?autoanswer:fail)
exten => s,n(autoanswer),Set(_ALERT_INFO="RA")			; This is for the PolyComs
exten => s,n,SIPAddHeader(Call-Info: Answer-After=0)	; This is for the Grandstream, Snoms, and Others
exten => s,n,NoOp()					; Add others here and Post on the Wiki!!!!
exten => s,n,Dial(${ARG1})
exten => s,n(fail),Hangup()


[demo]
include => stdexten
;
; We start with what to do when a call first comes in.
;
exten => s,1,Wait(1)			; Wait a second, just for fun
exten => s,n,Answer()			; Answer the line
exten => s,n,Set(TIMEOUT(digit)=5)	; Set Digit Timeout to 5 seconds
exten => s,n,Set(TIMEOUT(response)=10)	; Set Response Timeout to 10 seconds
exten => s,n(restart),BackGround(demo-congrats)	; Play a congratulatory message
exten => s,n(instruct),BackGround(demo-instruct)	; Play some instructions
exten => s,n,WaitExten()		; Wait for an extension to be dialed.

exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
exten => 2,n,Goto(s,instruct)

exten => 3,1,Set(CHANNEL(language)=fr)		; Set language to french
exten => 3,n,Goto(s,restart)		; Start with the congratulations

exten => 1000,1,Goto(default,s,1)
;
; We also create an example user, 1234, who is on the console and has
; voicemail, etc.
;
exten => 1234,1,Playback(transfer,skip)		; "Please hold while..."
					; (but skip if channel is not up)
exten => 1234,n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
exten => 1234,n,Goto(default,s,1)		; exited Voicemail

exten => 1235,1,VoiceMail(1234,u)		; Right to voicemail

exten => 1236,1,Dial(Console/dsp)		; Ring forever
exten => 1236,n,VoiceMail(1234,b)		; Unless busy

;
; # for when they're done with the demo
;
exten => #,1,Playback(demo-thanks)	; "Thanks for trying the demo"
exten => #,n,Hangup()			; Hang them up.

;
; A timeout and "invalid extension rule"
;
exten => t,1,Goto(#,1)			; If they take too long, give up
exten => i,1,Playback(invalid)		; "That's not valid, try again"

;
; Create an extension, 500, for dialing the
; Asterisk demo.
;
exten => 500,1,Playback(demo-abouttotry)	; Let them know what's going on
exten => 500,n,Dial(IAX2/guest@pbx.digium.com/s@default)	; Call the Asterisk demo
exten => 500,n,Playback(demo-nogo)	; Couldn't connect to the demo site
exten => 500,n,Goto(s,6)		; Return to the start over message.

;
; Create an extension, 600, for evaluating echo latency.
;
exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
exten => 600,n,Echo()			; Do the echo test
exten => 600,n,Playback(demo-echodone)	; Let them know it's over
exten => 600,n,Goto(s,6)		; Start over

;
;	You can use the Macro Page to intercom a individual user
exten => 76245,1,Macro(page,SIP/Grandstream1)
; or if your peernames are the same as extensions
exten => _7XXX,1,Macro(page,SIP/${EXTEN})
;
;
; System Wide Page at extension 7999
;
exten => 7999,1,Set(TIMEOUT(absolute)=60)
exten => 7999,2,Page(Local/Grandstream1@page&Local/Xlite1@page&Local/1234@page/n,d)

; Give voicemail at extension 8500
;
exten => 8500,1,VoiceMailMain()
exten => 8500,n,Goto(s,6)
;
; Here's what a phone entry would look like (IXJ for example)
;
;exten => 1265,1,Dial(Phone/phone0,15)
;exten => 1265,n,Goto(s,5)

;
;	The page context calls up the page macro that sets variables needed for auto-answer
;	It is in is own context to make calling it from the Page() application as simple as
;	Local/{peername}@page
;
[page]
exten => _X.,1,Macro(page,SIP/${EXTEN})

;[mainmenu]
;
; Example "main menu" context with submenu
;
;exten => s,1,Answer
;exten => s,n,Background(thanks)		; "Thanks for calling press 1 for sales, 2 for support, ..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(submenu,s,1)
;exten => 2,1,Hangup
;include => default
;
;[submenu]
;exten => s,1,Ringing					; Make them comfortable with 2 seconds of ringback
;exten => s,n,Wait,2
;exten => s,n,Background(submenuopts)	; "Thanks for calling the sales department.  Press 1 for steve, 2 for..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(default,steve,1)
;exten => 2,1,Goto(default,mark,2)
[toba-in-two]
; exten=>441651,1,Answer
; exten=>441651,1,Dial(SIP/101)
;exten => 737,1,Dial(SIP/TestLex@192.168.88.102) 
;[zadarma-in]
; [toba-in]

;exten => 737,1,Dial(SIP/TestLex@192.168.88.102) 
;[zadarma-in]
exten => callee_channel,1,NoOp(ARG1=${ARG1})
same => n,Set(SPYGROUP=${ARG1})
same => n,Log(NOTICE, called on channel ${CHANNEL})
;same => n,Return()
exten => called_channel,1,NoOp(ARG1=${ARG1})
same => n,Set(SPYGROUP=${ARG1})
same => n,Log(NOTICE,called on outbound channel ${CHANNEL} )
;same => n,Return()

exten=>441651,1,Answer
exten=>441651,2,verbose("starting")
exten=>441651,3,Set(Primary_language=${SIP_HEADER(X-Primary-language)})
exten=>441651,4,Set(Guest_language=${SIP_HEADER(X-Guest-language)})
exten=>441651,5,Set(Via=${SIP_HEADER(Via)})
exten=>441651,6,Set(From=${SIP_HEADER(From)})
exten=>441651,7,Set(To=${SIP_HEADER(To)})
exten=>441651,8,Set(Contact=${SIP_HEADER(Contact)})
exten=>441651,9,Set(Call_ID=${SIP_HEADER(Call-ID)})
exten=>441651,10,Set(User_Agent=${SIP_HEADER(User-Agent)})
exten=>441651,11,agi(tobamongo/tobalast.py)
;exten=>spyonchannel,1,Originate(local/786@from-phone_last,app,Chanspy,${OPTIONScllc},,,v(SPYCHANNEL=CALLER^GLOBALID=${Call_ID}^callerid=${CALLERID(num)})))
;exten=>spyonchannel,2,Originate(local/786@from-phone_last,app,Chanspy,${OPTIONScllce},,,v(SPYCHANNEL=CALLEE^GLOBALID=${Call_ID}^callerid=${CALLERID(num)}^calleeid=${number})))
;exten=>441651,12,verbose("dialing to " ${number} "callerid":${CALLERID(num)} ) 
;exten=>441651,13,Dial(SIP/+${number}@441651,20,tU(originate__spy_out_d^${guestlanguage},${CALLERID(num)}))
[spyonchannel]
exten=>s,1,verbose(${ARG1})
;exten=>s,2,Set(OPTIONS=",bBg(${ARG1})Eqow")
exten=>s,2,verbose("got chanspy options:" ${OPTIONS})
;exten=>s,4,Originate(local/786@from-phone_last,app,Chanspy,${OPTIONS},,,v(SPYCHANNEL=${ARG1}^GLOBALID=${Call_ID})))
exten=>s,3,Originate(local/786@from-phone_last,app,Chanspy,",g(CALLER)Eqow",,,av(SPYCHANNEL=CALLER^GLOBALID=${ARG1}^callerid=${ARG2})))
exten=>s,4,Originate(local/786@from-phone_last,app,Chanspy,",g(CALLEE)Eqow",,,v(SPYCHANNEL=CALLEE^GLOBALID=${ARG1}^callerid=${ARG2}^calleeid=${ARG3})))



[from-phone_last]

exten => 786,1,Answer()
exten => 786,2,verbose(${SPYCHANNEL} ${SIP_HEADER(Call-ID)})
exten => 786,3,agi(tobamongo/tobalast.py)

[originate__spy_last]
exten => s,1,verbose("starting")
exten => s,2,verbose("starting")
exten => s,3,Set(CHCALLERID=${ARG2})
exten => s,4,Set(SYSTEMDNID=${ARG3})
exten => s,5,verbose("got caller id number " ${CHCALLERID} )
same => n,Originate(local/786@transcribe,app,Chanspy,",bBg(${ARG1})Eqow",,,av(SPYCHANNEL=CALLER^GLOBALID=${ARG1}^CHCALLERID=${ARG2}^SYSTEMDNID=${ARG3}))
same => n,Originate(local/786@transcribe,app,Chanspy,",g(AGENT)Eoq",,,v(SPYCHANNEL=AGENT^GLOBALID=${ARG1}^SYSTEMDNID=${ARG3}^CHCALLERID=${ARG2}))



[originate__spy_out_d2]

exten=> s,1,Set(SPYGROUP=3303)

exten => s,2,verbose("start spy on  channels " ${SPYGROUP} )

same => n,Originate(local/786@from-phone1,app,Chanspy,",bBg(3300)Eqow",,,v(SPYCHANNEL=CALLER^GLOBALID=${ARG4}^action=Starttalking^callerid=${ARG2}))

same => n,Originate(local/786@from-phone1,app,Chanspy,",bBg(3303)Eqow",,,v(SPYCHANNEL=CALLEE^GLOBALID=${ARG4}^action=Starttalking^callerid=${ARG2}^calleeid=${ARG3}))


[toba-in]

;exten => 737,1,Dial(SIP/TestLex@192.168.88.102) 
;[zadarma-in]

exten=>441651,1,Answer
exten=>441651,2,Set(SPYGROUP=3300)
exten=>441651,3,Set(Primary_language=${SIP_HEADER(X-Primary-language)})
exten=>441651,4,Set(Guest_language=${SIP_HEADER(X-Guest-language)})
exten=>441651,5,Set(Via=${SIP_HEADER(Via)})
exten=>441651,6,Set(From=${SIP_HEADER(From)})
exten=>441651,7,Set(To=${SIP_HEADER(To)})
exten=>441651,8,Set(Contact=${SIP_HEADER(Contact)})
exten=>441651,9,Set(Call_ID=${SIP_HEADER(Call-ID)})
exten=>441651,10,Set(User_Agent=${SIP_HEADER(User-Agent)})
exten=>441651,11,agi(tobamongo/tobalast.py)
exten=>441651,12,verbose("dialing to " ${number} "callerid":${CALLERID(num)} ) 
exten=>441651,13,Dial(SIP/+${number}@441651,20,tU(originate__spy_out_d^${guestlanguage},${CALLERID(num)}))


[originate__spy_out_d]

exten=> s,1,Set(SPYGROUP=3303)

exten => s,2,verbose("start spy on  channels " ${SPYGROUP} )

same => n,Originate(local/786@from-phone1,app,Chanspy,",bBg(3300)Eqw",,,v(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking^guestlanguage=${ARG1}^callerid=${ARG2}))

;same => n,Originate(local/786@from-phone1,app,Chanspy,",Bd(SIP/102)Eoqw",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking^callerid=${ARG2}))



[originate_caller_spy]
exten => s,1,verbose("start spy on caller channel") 
same => n,Originate(local/786667@toba-in,app,ChanSpy,",be(SIP/101)Eqo",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}))
same => n,verbose(${SPYCHANNEL}) 
same => n,Goto(originate_agent_spy,s,1)

[originate_agent_spy]
exten => s,1,verbose("start spy on callee channel") 
same => n,Originate(local/786667@toba-in,app,ChanSpy,",be(SIP/102)Eqo",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}))  



;exten=>441651,10,agi(toba/tobaall_dtmf.py)
 
[originate_caller_spy1]
exten => s,1,verbose("start spy on caller channel") 
same => n,Originate(local/786@toba-in,app,ChanSpy,",be(SIP/101)Eqo",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}))
same => n,verbose(${SPYCHANNEL}) 
same => n,Goto(originate_agent_spy1,s,1)

[originate_agent_spy1]
exten => s,1,verbose("start spy on callee channel") 
same => n,Originate(local/786@toba-in,app,ChanSpy,",be(CHANNELS(SIP/102))Eqo",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}))  


[from-toba]

;perform outgoing calls

;added spy group to extension 3300 is optional

exten => 441651,1,Set(SPYGROUP=3300)

exten => 441651,2,verbose(${CHANNEL(pjsip,call-id)})

exten => 441651,3,Dial(SIP/+37499599799@toba-out,20,tU(originate__spy_out))



[from-phone1]

;perform local calls

exten => 789,1,verbose(${SIP_HEADER(Call-ID)})

exten => 789,2,Dial(PJSIP/102,20,tU(originate__spy))

 
exten => 786,1,Answer()
exten => 786,2,verbose(${SPYCHANNEL} ${SIP_HEADER(Call-ID)})
exten => 786,3,agi(tobamongo/tobalastsynchrone.py)

 

[originate__spy_local]

exten=> s,1,verbose("start spy on  channels")

same => n,Originate(local/786@from-phone1,app,ChanSpy,",be(PJSIP/101)Eqo",,,av(SPYCHANNEL=CALLER^GLOBALID=${CHANNEL(pjsip,call-id)}))

same => n,Originate(local/786@from-phone1,app,ChanSpy,",be(PJSIP/102)Eqo",,,v(SPYCHANNEL=AGENT^GLOBALID=${CHANNEL(pjsip,call-id)}))  

[clickincontext]
exten => _X,1,Answer()
exten => _X.,1,NoOp("Click Out Context")
exten => _X.,n,Dial(SIP/${EXTEN})

[originate__spy_out_from_agi]

exten=> s,1,Answer()

exten => s,2,verbose("start spy on  channels " ${SPYGROUP} )

same => n,Originate(local/786@from-phone1,app,Chanspy,",Bd(SIP/101)Eoqw",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking))

same => n,Originate(local/786@from-phone1,app,Chanspy,",Bd(SIP/102)Eoqw",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking))


[originate__spy_out]

exten=> s,1,Set(SPYGROUP=3303)

exten => s,2,verbose("start spy on  channels " ${SPYGROUP} )

same => n,Originate(local/786@from-phone1,app,Chanspy,",Bd(SIP/101)Eoqw",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking))

same => n,Originate(local/786@from-phone1,app,Chanspy,",Bd(SIP/102)Eoqw",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}^action=Starttalking))



;exten=>441651,1,Answer
;exten=>441651,2,Set(Primary_language=${SIP_HEADER(X-Primary-language)})
;exten=>441651,3,Set(Guest_language=${SIP_HEADER(X-Guest-language)})
;exten=>441651,4,Set(Via=${SIP_HEADER(Via)})
;exten=>441651,5,Set(From=${SIP_HEADER(From)})
;exten=>441651,6,Set(To=${SIP_HEADER(To)})
;exten=>441651,7,Set(Contact=${SIP_HEADER(Contact)})
;exten=>441651,8,Set(Call_ID=${SIP_HEADER(Call-ID)})
;exten=>441651,9,Set(User_Agent=${SIP_HEADER(User-Agent)})
;exten=>441651,10,agi(toba/tobaall_dtmf.py)
;exten=>441651,11,Hangup()


[toba-out]                   ; calls to 3-digit extension numbers of Asterisk
exten => _+XXX.,1,Dial(SIP/${EXTEN}@441651)             ; calls to numbers with 4 digits or more using the trunk 111111


[public]

exten => 851275,1,Goto(synthandrecog-gdf-json,s,1)
exten => 759,1,Goto(synthandrecog-gdf-json,s,1)
exten => 103,1,Answer
;exten => 103,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uni5-microsoft)
exten => 103,2,MRCPRecog(builtin:speech/transcribe,p=uni5-microsoft&spl=en-US)
exten => 103,n,Hangup
exten=>7644,1,Goto(synthandrecog-azure1,s,1)
; ATTENTION: If your Asterisk is connected to the internet and you do
; not have allowguest=no in sip.conf, everybody out there may use your
; public context without authentication.  In that case you want to
; double check which services you offer to the world.
;
exten=>441651,1,Answer
exten=>441651,2,Set(SPYGROUP=3300)
exten=>441651,3,Set(Primary_language=${SIP_HEADER(X-Primary-language)})
exten=>441651,4,Set(Guest_language=${SIP_HEADER(X-Guest-language)})
exten=>441651,5,Set(Via=${SIP_HEADER(Via)})
exten=>441651,6,Set(From=${SIP_HEADER(From)})
exten=>441651,7,Set(To=${SIP_HEADER(To)})
exten=>441651,8,Set(Contact=${SIP_HEADER(Contact)})
exten=>441651,9,Set(Call_ID=${SIP_HEADER(Call-ID)})
exten=>441651,10,Set(User_Agent=${SIP_HEADER(User-Agent)})
exten=>441651,11,agi(tobamongo/tobalast.py)
exten=>441651,12,verbose("dialing to " ${number} "callerid":${CALLERID(num)} ) 
exten=>441651,13,Dial(SIP/+${number}@441651,20,tU(originate__spy_out_d^${guestlanguage},${CALLERID(num)}))
[synthandrecog-azure1]

exten => s,1,Answer

exten => s,2,Set(PROMPT="Welcome to Azure Echo bot. Say something i will repeat your phrase")

exten => s,3,SynthAndRecog(${PROMPT},"builtin:speech/transcribe?",plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni5-microsoft)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:11)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:11)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0)})

exten => s,9,Set(PROMPT=${RECOG_INSTANCE(0/0)})

exten => s,10,Goto(3)

exten => s,11,MRCPSynth(Thank you. See you next time!)

exten => s,12,Hangup
include => demo

[default]
;
; By default we include the demo.  In a production system, you
; probably don't want to have the demo there.
;
include => demo

;
; An extension like the one below can be used for FWD, Nikotel, sipgate etc.
; Note that you must have a [sipprovider] section in sip.conf
;
;exten => _41X.,1,Dial(SIP/${FILTER(0-9,${EXTEN:2})}@sipprovider,,r)

; Real extensions would go here. Generally you want real extensions to be
; 4 or 5 digits long (although there is no such requirement) and start with a
; single digit that is fairly large (like 6 or 7) so that you have plenty of
; room to overlap extensions and menu options without conflict.  You can alias
; them with names, too, and use global variables

;exten => 6245,hint,SIP/Grandstream1&SIP/Xlite1(Joe Schmoe) ; Channel hints for presence
;exten => 6245,1,Dial(SIP/Grandstream1,20,rt)	; permit transfer
;exten => 6245,n(dial),Dial(${HINT},20,rtT)	; Use hint as listed
;exten => 6245,n,VoiceMail(6245,u)		; Voicemail (unavailable)
;exten => 6245,s+1,Hangup			; s+1, same as n
;exten => 6245,dial+101,VoiceMail(6245,b)	; Voicemail (busy)
;exten => 6361,1,Dial(IAX2/JaneDoe,,rm)		; ring without time limit
;exten => 6389,1,Dial(MGCP/aaln/1@192.168.0.14)
;exten => 6390,1,Dial(JINGLE/caller/callee) ; Dial via jingle using labels
;exten => 6391,1,Dial(JINGLE/asterisk@digium.com/mogorman@astjab.org) ;Dial via jingle using asterisk as the transport and calling mogorman.
;exten => 6394,1,Dial(Local/6275/n)		; this will dial ${MARK}

;exten => 6275,1,Gosub(${EXTEN},stdexten(${MARK}))
						; assuming ${MARK} is something like DAHDI/2
;exten => 6275,n,Goto(default,s,1)		; exited Voicemail
;exten => mark,1,Goto(6275,1)			; alias mark to 6275
;exten => 6536,1,Gosub(${EXTEN},stdexten(${WIL}))
						; Ditto for wil
;exten => 6536,n,Goto(default,s,1)		; exited Voicemail
;exten => wil,1,Goto(6236,1)

;If you want to subscribe to the status of a parking space, this is
;how you do it. Subscribe to extension 6600 in sip, and you will see
;the status of the first parking lot with this extensions' help
;exten => 6600,hint,park:701@parkedcalls
;exten => 6600,1,noop
;
;To subscribe to the availability of a free member in the 'markq' queue.
;Note: '_avail' is added to the QueueName
;exten => 8501,hint,Queue:markq_avail
;exten => 8501,1,Queue(markq)
;
; You can also monitor the status of a queue by providing a hint for a
; particular queue name.
;exten => 8502,hint,Queue:markq
;exten => 8502,1,Queue(markq)
;
; Some other handy things are an extension for checking voicemail via
; voicemailmain
;
;exten => 8500,1,VoicemailMain
;exten => 8500,n,Hangup
;
; Or a conference room (you'll need to edit meetme.conf to enable this room)
;
;exten => 8600,1,Meetme(1234)
;
; Or playing an announcement to the called party, as soon it answers
;
;exten = 8700,1,Dial(${MARK},30,A(/path/to/my/announcemsg))
;

; example of a compartmentalized company called "acme"
;
; this is the context that your incoming IAX/SIP trunk dumps you in...
;[acme-incoming]
;exten => s,1,Wait(1)
;exten => s,n,Answer()
;exten => s,n(menu),Playback(acme/vm-brief-menu)
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include  => acme-extens
;
;exten => i,1,Playback(vm-invalid)
;exten => i,n,Goto(s,exten)			; optionally, transfer to operator
;
;exten => t,1,Goto(s,goodbye)
;
; this is the context our internal SIP hardphones use (see sip.conf)
;
;[acme-internal]
;exten => s,1,Answer()
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include => trunkint
;include => trunkld
;include => trunklocal
;
;include => acme-extens
;
; you can test what your system sounds like to outside callers by dialing this
;exten => 777,1,DISA(no-password,acme-incoming)
;
; grouping of acme's extensions... never used directly, always included.
;
;[acme-extens]
;include => stdexten
;exten => 111,1,Gosub(111,stdexten(SIP/pete_1,acme))
;exten => 111,n,Goto(s,exten)
;
;exten => 112,1,Gosub(112,stdexten(SIP/nancy_1,acme))
;exten => 112,n,Goto(s,end)
;
; end of acme example

;
; Time context: you can patch this in via the following.
;
; [acme-internal]
; ...
; exten => 777,1,Gosub(time)
; exten => 777,n,Hangup()
;
; ...
; include => time
;
; Note: if you're geographically spread out, you can have SIP extensions
; specify their own local timezone in sip.conf as:
;
; [boi]
; type=friend
; context=acme-internal
; callerid="Boise Ofc. <2083451111>"
; ...
; ; use system-wide default timezone of MST7MDT
;
; [lws]
; type=friend
; context=acme-internal
; callerid="Lewiston Ofc. <2087431111>"
; ...
; setvar=timezone=PST8PDT
;
; "timezone" isn't a 'reserved' name in any way, and other places where
; the timezone is significant (e.g. calls to "SayUnixTime()", etc) will
; require modification as well.  Note that voicemail.conf already has
; a mechanism for timezones.
;

[time]
exten => _X.,30000(time),NoOp(Time: ${EXTEN} ${timezone})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
; the amount of delay is set for English; you may need to adjust this time
; for other languages if there's no pause before the synchronizing beep.
exten => _X.,n,Set(FUTURETIME=$[${EPOCH} + 12])
exten => _X.,n,SayUnixTime(${FUTURETIME},Zulu,HNS)
exten => _X.,n,SayPhonetic(z)
; use the timezone associated with the extension (sip only), or system-wide
; default if one hasn't been set.
exten => _X.,n,SayUnixTime(${FUTURETIME},${timezone},HNS)
exten => _X.,n,Playback(spy-local)
exten => _X.,n,WaitUntil(${FUTURETIME})
exten => _X.,n,Playback(beep)
exten => _X.,n,Return()

;
; ANI context: use in the same way as "time" above
;

[ani]
exten => _X.,40000(ani),NoOp(ANI: ${EXTEN})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
exten => _X.,n,Playback(vm-from)
exten => _X.,n,SayDigits(${CALLERID(ani)})
exten => _X.,n,Wait(1.25)
exten => _X.,n,SayDigits(${CALLERID(ani)})	; playback again in case of missed digit
exten => _X.,n,Return()

; For more information on applications, just type "core show applications" at your
; friendly Asterisk CLI prompt.
;
; "core show application <command>" will show details of how you
; use that particular application in this file, the dial plan.
; "core show functions" will list all dialplan functions
; "core show function <COMMAND>" will show you more information about
; one function. Remember that function names are UPPER CASE.



   
[autodialer]                                                  #
exten => 103,1,Playback(some-foo-goes-here)                   #
exten => 100,2,Wait(1)                                        #
exten => 100,3,Playback(goodbye)                              #
exten => 100,4,Hangup  
   
[MyContext]


exten =>1123,1,Dial(SIP/1006) 

exten => 441651,1,Answer
exten=> 441651,2,agi(toba/tobaall_dtmf.py)
exten=> 441651,3,Hangup()

;================================UNIMRCPTESTEXTENSTION==============================


;================================UNIMRCPGOOGLE==============================
exten => 100,1,Answer
;exten => 100,2,Set(headers="Accept-Contact: *\;speechrecog.engine="Google-SR-1"\;speechsynth.engine="Azure-SS-1"")
exten => 100,2,agi(tobamongo/translatetest2.py)

;exten => 100,2,MRCPSynth("Здравствуйте, уважаемые коллеги, я Анна Азоян, профессор кафедры гастроэнтерологии и патологии амнионов Ереванского государственного медицинского университета, врач-гастроэнтеролог, гепатолог, врач одноименного отделения Университетской больницы имени Микаеляна. Сегодня поговорим о циррозе печени. Цирроз печени – клинико-патологическое заболевание, характеризующееся образованием в печени фиброзно-регенеративных узелков, которые приводят к нарушению нормальной архитектуры печени. Цирроз считается конечной терминальной стадией фиброгенеза. Как фиброз, так и цирроз развиваются в ответ на хроническое повреждение печени. Если говорить об эпидемиологии, то смертность в Европе считается сто семьдесят тысяч случаев в год, в Соединенных Штатах Америки от цирроза печени и его осложнений ежегодно умирает менее тридцати пяти тысяч человек. Наиболее распространенными причинами являются злоупотребление алкоголем, хронические вирусные гепатиты В и С и неалкогольная жировая болезнь печени, или, как ее сейчас называют метаболически-ассоциированное заболевание печени. Этиология, первая наиболее частая причина, как мы уже говорили, это вирусные гепатиты, гепатиты В, С, D, алкогольная болезнь печени, неалкогольная жировая болезнь печени, метаболические заболевания печени, среди которых наследственный гемахроматоз, болезнь Вильсона-Конавалова, альфа один дефицит антитрипсина, муковисцидоз, дефицит аминокислот нарушения тирозинемия, нарушения углеводов, галактоземия, непереносимость фруктозы, нарушения липидного обмена, порфирия Лекарственное поражение печени также может вызывать цирроз. Хронические холестатические заболевания печени: первичный билиарный цирроз, первичный склерозирующий холангит, а также иммуноглобулин G-ассоциированная холангиопатия; хронические заболевания желчевыводящих путей: рецидивирующий бактериальный холангит, стеноз желчевыводящих путей, атрезия желчных протоков, врожденные кисты желчевыводящих путей; сердечно-сосудистые заболевания: болезнь Бад-Киара, венококковая недостаточность , или конструктивный перикардит, болезнь Ослера-Вебера и другие причины также могут быть: идиопатическая портальная гипертензия может со временем привести к циррозу печени, поликистозу печени, саркоидозу, амилоидозу печени, другим кумулятивным заболеваниям и хроническим инфекциям бруцеллезу, сифилису , шистосоматоз, эхинакокоз. Также существует термин криптогенный цирроз. Например, индийский цирроз печени, часто возникающий у детей раннего возраста в Индии, конечная причина которого неизвестна, может быть классифицирован как криптогенный цирроз, что связано с тем, что исследования показывают, что он чаще встречается у детей которые находились на искусственном вскармливании, т.е. не ели грудного молока, или ели мало и ели дополнительную пищу. В развитии цирроза печени играют роль различные факторы, в том числе: возраст, пол, состояние иммунной системы, наличие различных вредных привычек.",p=uni2&l=en-US)
;exten => 100,3,MRCPRecog(builtin:speech/transcribe,p=uni2&spl=en-US)
;exten => 100,4,Hangup
;================================UNIMRCPGOOGLE==============================

;================================UNIMRCPYANDEX==============================
exten => 101,1,Answer
exten => 101,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uniy)
exten => 101,3,MRCPRecog(builtin:speech/transcribe,p=uniy&spl=en-US)
exten => 101,n,Hangup
;================================UNIMRCPYANDEX==============================



;================================UNIMRCPGDF==============================
exten => 102,1,Answer
;exten => 102,2,MRCPSynth(Hello!,builtin:speech/transcribe,p=uni_gdf)
; exten => 102,3,Set(PARAMETERS="payload='{\'name\':\'DefaultWelcomeIntent-followup\'\;\'lifespanCount\':\'5\'\;\'parameters\':{\'user_name\':\'Maria Cortes\'}}'\")
exten => 102,2,MRCPRecog(builtin:event/welcome?payload=\"{\'parameters\':{\'name\':\'Maria Cortes\'}}\",p=uni_gdf&spl=en-US)
;exten => 102,3,MRCPRecog(,p=uni_gdf&spl=en-US&gd=^)
;exten => 102,n,MRCPRecog(<?xml version="1.0" ?> <grammar mode=\"voice\" root=\"keywords\" type=\"application/srgs+xml\" xml:lang=\"en-US\"><tag>{\"contexts\":[{\"name\":\"DefaultWelcomeIntent-followup\",\"lifespanCount\":\"5\"\,\"parameters\":{\"user_name\":\"Maria Cortes\"}}]}</tag><meta name=\"scope\" content=\"hint\"/><rule id=\"keywords\"><one-of><item>blank</item></one-of></rule></grammar>,p=uni_gdf&spl=en-US)
; exten => 102,2,SynthAndRecog(" ",builtin:event/welcome?contexts=[{\"name\":\"defaultwelcomeintent-followup\",\"lifespanCount\":2,\"parameters\":\{\"name\":\"Maria Cortes\"\}}],plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni2)
exten => 102,n,Hangup
;================================UNIMRCPGDF==============================


;================================UNIMRCPAZURE==============================
exten => 103,1,Answer
exten => 103,2,MRCPSynth("كيف الحال",p=uni5-microsoft)
exten => 103,3,MRCPRecog(builtin:speech/transcribe,p=uni5-microsoft)
exten => 103,n,Hangup

exten => 1033,1,Answer
;exten => 1033,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uni5-microsoft)
exten => 1033,2,MRCPRecog(builtin:speech/transcribe,p=uni5-microsoft&spl=en-es)
exten => 1033,n,Hangup

exten => 10334,1,Answer
;exten => 1033,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uni5-microsoft)
exten => 10334,2,MRCPRecog(builtin:speech/transcribe,p=uni5-microsoft)
exten => 10334,n,Hangup

exten => 111,1,Answer
;exten => 104,2,MRCPSynth(Hello!,"builtin:speech/transcribe?tag-format=semantics/json\;method=listen",spl=en-US&p=azurebot)
exten => 111,2,MRCPRecog(builtin:speech/transcribe,p=azurebot&spl=en-US)
exten => 111,n,Hangup
;================================UNIMRCPAZURE==============================

;================================UNIMRCPAZUREBOT==============================
exten => 104,1,Answer
;exten => 104,2,MRCPSynth(Hello!,"builtin:speech/transcribe?tag-format=semantics/json\;method=listen",spl=en-US&p=azurebot)
exten => 104,2,MRCPRecog("builtin:speech/transcribe?tag-format=semantics/json\;method=listen",p=azurebot&spl=en-US)
exten => 104,n,Hangup
;================================UNIMRCPAZUREBOT============================== 

;================================UNIMRCPALEX==============================
exten => 105,1,Answer
exten => 105,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uni3_amazon)
exten => 105,3,MRCPRecog(builtin:speech/transcribe,p=uni3_amazon&spl=en-US)
exten => 105,n,Hangup
;================================UNIMRCPALEX==============================
;================================UNIMRCPYANDEX==============================
exten => 106,1,Answer
exten => 106,2,MRCPSynth(hello!,builtin:speech/transcribe,spl=en-US&p=uniy)
exten => 106,3,MRCPRecog(builtin:speech/transcribe,p=uniy&spl=en-US)
exten => 106,n,Hangup
;================================UNIMRCPYANDEX==============================
;================================UNIMRCPkaldi==============================
exten => 107,1,Answer
exten => 107,2,MRCPRecog(builtin:speech/transcribe,p=kaldi&spl=en-US)
exten => 107,n,Hangup
;================================UNIMRCPkaldi==============================
;================================UNIMRCPtranscribe==============================
exten => 108,1,Answer
exten => 108,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=es-US&p=uni3_amazon)
exten => 108,3,MRCPRecog(builtin:speech/transcribe,p=uni3_amazon&spl=en-US)
exten => 108,n,Hangup
;================================UNIMRCPALEX==============================



;===============================SSML======================================
exten => 109,1,Answer
exten => 109,2,MRCPSynth(<?xml version=\"1.0\"?><speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"en-US\"><voice name=\"en-US-Wavenet-B\">My name is en-US-Wavenet-B.</voice> </speak>,p=uni2)
exten => 109,n,Hangup
;===============================SSML======================================


exten => 110,1,Answer
exten => 110,2,goto(synthandrecog-app3,s,1)


exten => 1000,1,Originate(local/103@MyContext,app,ChanSpy,",be(SIP/102)Eqo",,,av)




;ASPECT
;=========================================vxml=================================================
exten => 737,1,Dial(SIP/TestLex@192.168.88.102) 
exten => 737,2,Hangup 

;=========================================vxml worked lex=================================================
exten => 738,1,Dial(SIP/TestLexV2@192.168.88.102) 
exten => 738,2,Hangup 

exten => 739,1,Dial(SIP/TestLexV2replace@192.168.88.102) 
exten => 739,2,Hangup 

exten => 740,1,Dial(SIP/TestGdfCx@192.168.88.102) 
exten => 740,2,Hangup 

exten => 741,1,Dial(SIP/TestDialogflowCxCommon@192.168.88.102) 
exten => 741,2,Hangup 

exten => 742,1,Dial(SIP/TestDialogflow@192.168.88.102) 
exten => 742,2,Hangup 

exten => 743,1,Dial(SIP/TestGdf@192.168.88.102) 
exten => 743,2,Hangup

exten => 744,1,Dial(SIP/TestAzurebot@192.168.88.102) 
exten => 744,2,Hangup
;ASPECT


;=========================================AGI=================================================
;dialogflow stripe
exten=> 745,1,Answer
exten=> 745,2,Set(GDF_PROJECT_ID="support-sshtnd")
exten=> 745,3,agi(stripepayment/payivr.py)
exten=> 745,4,Hangup()

;dialogflow paypal
exten=> 746,1,Answer
exten=> 746,2,Set(GDF_PROJECT_ID="core-hash-282119")
exten=> 746,3,agi(paypalpayment/payivr.py)
exten=> 746,4,Hangup()

;dialogflow genesis
exten=> 747,1,Answer
exten=> 747,2,Set(GDF_PROJECT_ID="gcalendar-glrl")
exten=> 747,3,agi(googlecalendar/agi_dialogflow.py)
exten=> 747,4,Hangup()


;dialogflow
exten=> 749,1,Answer
exten=> 749,2,Set(GDF_PROJECT_ID="cris-ebmmue")
exten=> 749,3,agi(dialogflownew/agi_dialogflow.py)
exten=> 749,4,Hangup()

;simple tests
exten => 750,1,Answer();
exten => 750,2,agi(demos/simples/simple1.py)

;exten => 749,1,Answer
;exten => 749,n,SynthAndRecog(Welcome,/var/lib/asterisk/agi-bin/demos/simples/simple.grxml,spl=en-GB&p=uni2)

;dialogflow cx
exten => 751,1,Answer();
exten => 751,2,Set(GDF_PROJECT_ID="rosy-crawler-288816")
exten => 751,3,Set(GDF_AGENT_ID="11f9f5bd-9754-407d-ac0a-3a7f6023589d")
exten => 751,4,Set(GDF_LOCATION="global")
exten => 751,5,agi(demos/gdf/agi_dialogflowCX.py)
exten => 751,6,Verbose(1, result: ${RECOG_RESULT})
;azurebot
exten => 752,1,Answer();
exten => 752,2,agi(demos/azure/agi_azurebot.py)
;aws lexv2
exten => 753,1,Answer();
exten => 753,2,Set(AWS_REGION="us-east-1")
exten => 753,3,Set(AWS_BOT_ID="QL2JKXN9BI")
exten => 753,4,Set(AWS_ALIAS_ID="TSTALIASID")
exten => 753,5,agi(demos/lex/agi_lexv2.py)

exten => 7533,1,Answer();
exten => 7533,2,Set(AWS_REGION="us-east-1")
exten => 7533,3,Set(AWS_BOT_ID="KBUOIK3D62")
exten => 7533,4,Set(AWS_ALIAS_ID="TSTALIASID")
exten => 7533,5,agi(github/asterisk/agi/lex/sampleWeaterNowBot/agi_lexv2_weather.py)
;aws lex
exten => 754,1,Answer();
exten => 754,2,agi(demos/lex/agi_lex.py)
;============================================================================================

;Agi test pjsip
;=========================================test=================================================
;exten => 755,1,Answer();
;exten => 755,2,BackgroundDetect(/root/build-asterisk/testsounds/output, 1000, 50, 30050)
;exten => 755,3,agi(agi_test.py)
exten => 755,1,Answer()
exten => 755,2,MRCPRecog(builtin:speech/transcribe,p=uni2&spl=en-US)
exten => 755,3,MRCPSynth(Thank you. See you next time!,p=uni2)
;=========================================test=================================================



;============================================================================================
;================================UNIMRCPkaldi==============================
exten => 756,1,Answer
exten => 756,2,MRCPRecog(builtin:speech/transcribe,p=kaldi&spl=es-ES)
exten => 756,n,Hangup
;================================UNIMRCPkaldi==============================

;================================UNIMRCPGOOGLEDIALOGFLOW==============================

exten => 757,1,Goto(synthandrecog-gdf-xml,s,1)
exten => 758,1,Goto(synthandrecog-gdf-event,s,1)
exten => 759,1,Goto(synthandrecog-gdf-json,s,1)
exten => 775,1,Goto(synthandrecog-gsr-xml,s,1)

exten => 760,1,Set(GDF_PROJECT_ID="rosy-crawler-288816")
exten => 760,2,Set(GDF_AGENT_ID="11f9f5bd-9754-407d-ac0a-3a7f6023589d")
exten => 760,3,Set(GDF_LOCATION="global")
exten => 760,4,Set(PARAMETERS="projectid=${GDF_PROJECT_ID}\;agent=${GDF_AGENT_ID}\;location=${GDF_LOCATION}")
exten => 760,5,Goto(synthandrecog-gdf-cx-json,s,1)


exten => 761,1,Set(GDF_PROJECT_ID="rosy-crawler-288816")
exten => 761,2,Set(GDF_AGENT_ID="11f9f5bd-9754-407d-ac0a-3a7f6023589d")
exten => 761,3,Set(GDF_LOCATION="global")
exten => 761,4,Set(PARAMETERS="projectid=${GDF_PROJECT_ID}\;agent=${GDF_AGENT_ID}\;location=${GDF_LOCATION}\;")
exten => 761,5,Goto(synthandrecog-gdf-cx-event_xml,s,1)


exten => 762,1,Set(GDF_PROJECT_ID="rosy-crawler-288816")
exten => 762,2,Set(GDF_AGENT_ID="11f9f5bd-9754-407d-ac0a-3a7f6023589d")
exten => 762,3,Set(GDF_LOCATION="global")
exten => 762,4,Set(PARAMETERS="projectid=${GDF_PROJECT_ID}\;agent=${GDF_AGENT_ID}\;location=${GDF_LOCATION}")
exten => 762,5,Goto(synthandrecog-gdf-cx-xml,s,1)
;================================UNIMRCPAMAZONLEX==============================
;================================================================================================
exten => 7633,1,Answer();
exten => 7633,2,Set(CID=${CALLERID(num)})
exten => 7633,3,Set(AWS_BOT_ID="QL2JKXN9BI")
exten => 7633,4,Set(AWS_ALIAS_ID="TSTALIASID")
exten => 7633,5,Set(PARAMETERS="bot-name=${AWS_BOT_ID}\;alias=${AWS_ALIAS_ID}\;lex.callerIdNumber=1000\;")
exten => 7633,6,Goto(synthandrecog-lex-json-event-custom-parameters,s,1)

;================================UNIMRCPAMAZONLEX==============================


;================================UNIMRCPAZUREBOT=============================
exten=>764,1,Goto(synthandrecog-azurebot,s,1)
exten=>7644,1,Goto(synthandrecog-azure,s,1)
exten=>7645,1,Goto(synthandrecog-azurebot-activity,s,1)
exten=>7646,1,Goto(synthandrecog-azurebot-activity-payload,s,1)
exten=>7647,1,Goto(synthandrecog-azurebot-activity-payload-test,s,1)

;================================UNIMRCPAZUREBOT=============================
;================================UNIMRCPSOUNDHOUND=============================
exten =>7648,1,Goto(synthandrecog-houndify-xml,s,1)
exten =>76488,1,Goto(synthandrecog-houndify-xml-bot,s,1)

exten=> 7649,1,Answer
exten=> 7649,2,Set(SOUNDHOUNDBSDOMAINS=Query Glue,Map Data,Weather)
exten=> 7649,3,Verbose(${SOUNDHOUNDBSDOMAINS} )
exten=> 7649,4,agi(github/asterisk/agi/soundhoundbs/agi_soundhoundbs.py)
exten=> 7649,5,Hangup()
;================================UNIMRCPAZUREBOT=============================
;
;===================================avaya=================================
;intro
exten => 765,1,Dial(SIP/100@avaya) 
exten => 765,2,Hangup
;dialogflow cx
exten => 766,1,Dial(SIP/101@avaya) 
exten => 766,2,Hangup
;sample test
exten => 772,1,Dial(SIP/103@avaya) 
exten => 772,2,Hangup
;azurebot
exten => 767,1,Dial(SIP/102@avaya) 
exten => 767,2,Hangup
;lex json
exten => 768,1,Dial(SIP/104@avaya) 
exten => 768,2,Hangup

;lex xml
exten => 769,1,Dial(SIP/105@avaya) 
exten => 769,2,Hangup

;gdf 
exten => 770,1,Dial(SIP/106@avaya) 
exten => 770,2,Hangup
;exten => 768,1,Dial(SIP/100@192.168.88.145) 
;exten => 768,2,Hangup
;=====================================avaya==========================




;aws lex
exten => 771,1,Answer();
exten => 771,2,agi(demos/agi_voice.py)

;================================UNIMRCPGOOGLEDIALOGFLOW==============================
;============================================xml===========================================




;=================================agi call queue unispeech =============================
;dialogflow support
exten=> 773,1,Answer
exten=> 773,2,Set(GDF_PROJECT_ID="test-giro")
exten=> 773,3,agi(support/agi_dialogflow.py)
exten=> 773,4,Hangup()

exten => 774,1,Verbose(2,${CALLERID(all)} entering the support queue)
same => n,Queue(support)
same => n,Hangup()


exten=>507,1,Goto(context_543,s,1)
;=================================call queue =============================




;========================conferance================================




exten => 777,1,Progress()
exten => 777,2,Wait(1)
exten => 777,3,ConfBridge(1,myconferenceroom,admin_user,sample_admin_menu)

exten => 778,1,Progress()
exten => 778,2,Wait(1)
exten => 778,3,ConfBridge(1,myconferenceroom,default_user,volume_ctrl_menu)
;same => n,Originate(SIP/101,exten,conference_context,myconferenceroom,1)



;exten=> 779,1,Answer
;exten=> 779,2,agi(translate/polytranscribe.py)
;exten=> 779,3,Hangup()
exten=> 779,1,Answer
;exten=> 779,2,Set(xxxx=${SIP_HEADER(co)})
exten=> 779,2,Verbose(1, all_present: ${SIP_HEADER(From)}})
;exten=> 779,2,Verbose(1, all_present: ${xxxx)})
;exten=> 779,4,agi(translate/polytranscribe2.py)
;exten=> 779,5,Hangup()

exten=> 782,1,Answer
exten=> 782,2,agi(poly/polyall_dtmf.py)
exten=> 782,3,Hangup()

exten=> 780,1,Dial(Sip/101)
same => 780,n,Originate(SIP/100,exten,MyContext,779,1)

exten=> 781,1,Answer
exten=> 781,2,agi(translate/polytranscribe2_draft_worked_withchanges.py)
exten=> 781,3,Hangup()

exten=> 784,1,Goto(conference,conference-guest-entry,1)
;exten => 781,n,Set(CALLERID(all)={$CALLERID(num)})

exten => 790,1,Answer()
exten => 790,2,MeetMe(790)
;=================================conferance with conf bridge=====================

exten => 783,1,Answer()
exten => 783,2,SIPAddHeader(X-Primary-language:en-US)
exten => 783,3,SIPAddHeader(X-Guest-language:fr-FR)
exten => 783,4,Dial(SIP/poly@34.86.22.197:7072)

exten => 7830,1,Answer()
;exten => 7830,2,SIPAddHeader(X-Primary-language:en-US)
;exten => 7830,3,SIPAddHeader(X-Guest-language:fr-FR)
exten => 7830,2,Dial(SIP/poly@34.86.22.197:7072)
;===============================================================================


exten => 786,1,ChanSpy(SIP/103)

exten => 787,1,transfer(SIP/103)

exten => 789,1,Goto(synthandrecog-transcribe-json,s,1)

;=============================================================
exten=> 9022,1,Answer
exten=> 9022,2,agi(xina/xinivrtest.py)
exten=> 9022,3,Hangup()

exten=> 902,1,Answer
exten=> 902,2,agi(DT/dtivr.py)
exten=> 902,4,Hangup()

exten=> 904,1,Answer
exten=> 904,2,agi(DT/dtivrfastapi.py)
exten=> 904,4,Hangup()

exten=> 903,1,Answer
exten=> 903,2,agi(DT/dtivrgdf.py)
exten=> 903,4,Hangup()


;=========transcribe spy============================
exten=> 900,1,Answer
exten=> 900,2,agi(transcribe/agi_transcribe.py)
exten=> 900,4,Hangup()

;================================SPY=================================================


;=========chanspy==================================
;b - Only spy on channels involved in a bridged call.
;e - Enable enforced mode, so the spying channel can only monitor extensions whose name is in the ext : delimited list
;E - Exit when the spied-on channel hangs up.
;q - Don't play a beep when beginning to spy on a channel, or speak the selected channel name.
;o - Only listen to audio coming from this channel.


;==============================originate==============================
;a- async 
;v variable
exten => 901,1,Answer()
exten => 901,2,Dial(SIP/101,20,tU(901^901^4))
exten => 901,3,verbose("start spy on channel") 
exten => 901,4,Originate(local/synthandrecog-trs-json^1,app,ChanSpy,",be(SIP/101)Eqo",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}))
exten => 901,5,Originate(local/synthandrecog-trs-json^1,app,ChanSpy,",be(SIP/102)Eqo",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)})) 



;exten=> 785,1,verbose(${SPYCHANNEL} ${SIP_HEADER(Call-ID)}) 
;exten => 785,2,Goto(synthandrecog-trs-json,s,1)

;exten => 788,1,Answer()
;same => n,Dial(SIP/101,20,tU(originate_caller_spy))
;same => n,Dial(SIP/103,20,tU(jump_to_here^{EXTEN}),tU(jump_to_here2^{EXTEN}))


;[originate_caller_spy]
;exten => s,1,verbose("start spy on caller channel") 
;same => n,Originate(local/785@MyContext,app,ChanSpy,",be(SIP/101)Eqo",,,av(SPYCHANNEL=CALLER^GLOBALID=${SIP_HEADER(Call-ID)}))
;same => n,verbose(${SPYCHANNEL}) 
;same => n,Goto(originate_agent_spy,s,1)

;[originate_agent_spy]
;exten => s,1,verbose("start spy on callee channel") 
;same => n,Originate(local/785@MyContext,app,ChanSpy,",be(SIP/102)Eqo",,,v(SPYCHANNEL=AGENT^GLOBALID=${SIP_HEADER(Call-ID)}))   

;[originate_caller_spy_test]
;exten => s,1,verbose("start spy on caller channel") 
;same => n,Originate(local/785@MyContext,app,ChanSpy,",be(SIP/100)Eqo",,,av)
;same => n,verbose(${SPYCHANNEL}) 
;same => n,Goto(originate_agent_spy,s,1)

[originate_agent_spy_test]
exten => s,1,verbose("start spy on callee channel") 
same => n,Originate(local/785@MyContext,app,ChanSpy,",be(SIP/103)Eqo",,,v)   

; [test]
; exten => 1000,verbose("start spy on caller channel") 
; exten => 1000,Set(command=Originate(local/103@MyContext,app,ChanSpy,",be(SIP/100)Eqo",,,av)))
; exten => 1000,1,Set(COUNT=1)
; exten => 1000,2,While($[ ${COUNT} < 2 ])
; exten => 1000,3,${command}
; exten => 1000,4,Set(COUNT=$[${COUNT} + 1])
; exten => 1000,5,EndWhile()



;exten => 789,1,Answer()
;same => n,Dial(SIP/103,20,tU(originate_caller_spy))
;same => n,Dial(SIP/103,20,tU(jump_to_here^{EXTEN}),tU(jump_to_here2^{EXTEN}))


  

;================================SPY=================================================

[conference]




exten=> 779,1,Answer
exten=> 779,2,Verbose(1,${CALLER_ID})
;exten => 779,3,Set(CALLERID=${__CALLER_ID})
exten=> 779,3,agi(poly/polyivr.py)
exten=> 779,4,Hangup()

exten => conference-guest-entry,1,Answer()
exten => conference-guest-entry,n,ConfBridge(1,myconferenceroom,default_user,volume_ctrl_menu)
exten => conference-guest-entry,n,Hangup()

exten => conference-admin-entry,1,Answer()
exten => conference-admin-entry,n,ConfBridge(1,myconferenceroom,admin_user,sample_admin_menu)
exten => conference-admin-entry,n,Hangup()

exten => conference-poly-entry,1,Answer()
exten => conference-poly-entry,n,Verbose(1, Outgoing Caller ID: ${CALLER_ID})
;same => n,Set(CALLERID=${CALLERID(num)})
;exten => conference-poly-entry,n,agi(translate/polytranscribe.py)
exten => conference-poly-entry,n,ConfBridge(1,myconferenceroom,poly_user)
exten => conference-poly-entry,n,Hangup()

exten => conference-joiner,1,NoOp()
;exten => conference-joiner, n,Read(101,vm-enter-num-to-call)
;exten => conference-joiner,2,Set(CALLERID(all)=${CALLERID(num)})
;exten => 781,n,Verbose(1, Outgoing Caller ID: ${CALLERID(all)})
;exten => conference-joiner, n,Originate(SIP/101,exten,conference,conference-admin-entry,1)
;same => n,Verbose(1, Outgoing Caller ID: {$CALLERID(all)})
same => n,Originate(SIP/103,exten,conference,conference-admin-entry,1)


exten => conference-poly-joiner,1,NoOp()
exten => conference-poly-joiner,n,Verbose(1, Outgoing Caller ID: ${CALLERID(num)})
exten => conference-poly-joiner,n,Set(GLOBAL(CALLER_ID)=${CALLERID(num)})
;same => n,Dial(Local/779@MyContext,G(conferance^conference-poly-entry^1))
exten => conference-poly-joiner,n,Originate(local/779@conference,exten,conference,conference-poly-entry,1})
;exten => conference-poly-joiner,n,Page(SIP/779)


exten => h,1, NoOp(“dialplan is in h extension”)
exten => h,n, GotoIf($[ “${CONFBRIDGE_RESULT}” : “HANGUP”]?ok)
exten => h,n, NoOp("value of CONFBRIDGE_RESULT is not HANGUP") ; or whatever you want to happen
exten => h,n, NoOp(the value is  ${CONFBRIDGE_RESULT})
exten => h,n, Goto(h,end)
exten => h,n(ok), NoOp("value of CONFBRIDGE_RESULT is HANGUP") ; or whatever you want to happen
exten => h,n(end),NoOp("this is the end")

;==========================================conf bridge finish=========================



[synthandrecog-gdf-xml]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},"builtin:speech/transcribe,builtin:dtmf/digits?",plt-1&b=1&sct=700&sint=15000&nit=10000&spl=en-US&p=uni_gdf)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:12)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:12)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, all_present: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,9,Set(PROMPT=${RECOG_INSTANCE(0/0/fulfillment_text)})

exten => s,10,Goto(3)

exten => s,11,MRCPSynth(Thank you. See you next time!)

exten => s,12,Hangup

;============================================triggering welcome event===========================================

[synthandrecog-gdf-event]

exten => s,1,Answer

exten => s,2,Set(NAME=Mike)

exten => s,3,Set(PROMPT=)

exten => s,4,Set(GRAMMAR= builtin:event/welcome?)

exten => s,5,ExecIf($["${NAME}" != ""]?Set(GRAMMAR=builtin:event/welcome?name=${NAME}))

exten => s,6,SynthAndRecog( ${PROMPT},${GRAMMAR},plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni_gdf)

exten => s,7,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,8,GotoIf($["${RECOG_STATUS}" = "OK"]?12:17)

exten => s,9,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?12:17)

exten => s,10,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,11,Verbose(1, all_required_params_present confidence: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,12,Set(PROMPT="${RECOG_INSTANCE(0/0/fulfillment_text)}")

exten => s,13,Set(GRAMMAR=builtin:speech/transcribe?)

exten => s,14,Verbose(${RECOG_INSTANCE(0/0/fulfillment_text)})

exten => s,15,Goto(6)

exten => s,16,MRCPSynth(Thank you. See you next time!)

exten => s,17,Hangup


;============================================json===========================================


[synthandrecog-gdf-json]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?,nif=json&plt-1&b=1&sct=700&sint=4000&t=20000&nit=5000&spl=en-US&p=uni_gdf)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:12)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:12)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, all_present: ${RECOG_INSTANCE(0/0/allRequiredParamsPresent)})

exten => s,9,Set(PROMPT=${RECOG_INSTANCE(0/0/fulfillmentText)})

exten => s,10,Goto(3)

exten => s,11,MRCPSynth(Thank you. See you next time!)

exten => s,12,Hangup
;================================UNIMRCPGOOGLEDIALOGFLOW==============================



;============================================================================================================================
;================================UNIMRCPGOOGLEDIALOGFLOW-CX==============================

;============================================json===========================================
[synthandrecog-gdf-cx-json]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?${PARAMETERS},nif=json&plt-1&b=1&sct=1000&sint=15000&nit=10000,spl=en-US&p=uni_gdfcx)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:13)

exten => s,6,GotoIf($$[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?7:13)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, currentPageDisplayName: ${RECOG_INSTANCE(0/0/currentPage/displayName)})

exten => s,9,GotoIf($["${RECOG_INSTANCE(0/0/currentPage/displayName)}" = "End Session"]?13:10)

exten => s,10,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/diagnosticInfo/Execution Sequence/3/Step 1)})

exten => s,11,ExecIf($["${RECOG_INSTANCE(0/0/responseMessages/0/text/text/0)}" != ""]?Set(PROMPT=${RECOG_INSTANCE(0/0/responseMessages/0/text/text/0)}))

exten => s,12,Goto(3)

exten => s,13,MRCPSynth(Thank you. See you next time!)

exten => s,14,Hangup

;============================================xml===========================================
[synthandrecog-gdf-cx-xml]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?${PARAMETERS},plt-1&b=1&sct=1000&sint=15000&nit=10000,spl=en-US&p=uni_gdfcx)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:13)

exten => s,6,GotoIf($[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?7:13)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, current_page_display_name: ${RECOG_INSTANCE(0/0/current_page/display_name)})

exten => s,9,GotoIf($["${RECOG_INSTANCE(0/0/current_page/display_name)}" = "End Session"]?13:10)

exten => s,10,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/response_messages/0/text/text/0)})

exten => s,11,ExecIf($["${RECOG_INSTANCE(0/0/response_messages/0/text/text/0)}" != ""]?Set(PROMPT=${RECOG_INSTANCE(0/0/response_messages/0/text/text/0)}))

exten => s,12,Goto(3)

exten => s,13,MRCPSynth(Thank you. See you next time!)

exten => s,14,Hangup


;============================================triggering welcome event===========================================

[synthandrecog-gdf-cx-event_xml]

exten => s,1,Answer

exten => s,2,Set(NAME=Mike) 

exten => s,3,Set(PROMPT=)

exten => s,4,Set(GRAMMAR= builtin:intent/00000000-0000-0000-0000-000000000000?${PARAMETERS})

exten => s,5,ExecIf($["${NAME}" != ""]?Set(GRAMMAR=builtin:intent/00000000-0000-0000-0000-000000000000?${PARAMETERS}parameters={'name':'${NAME}'} ))

exten => s,6,SynthAndRecog( ${PROMPT},${GRAMMAR},plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni_gdfcx)

exten => s,7,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,8,GotoIf($["${RECOG_STATUS}" = "OK"]?9:18)

exten => s,9,GotoIf($[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?10:17)

exten => s,10,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,11,Verbose(1, got display name : ${RECOG_INSTANCE(0/0/current_page/display_name)})

exten => s,12,GotoIf($["${RECOG_INSTANCE(0/0/current_page/display_name)}" = "End Session"]?18:13)

exten => s,13,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/response_messages/text/text)})

exten => s,14,ExecIf($["${RECOG_INSTANCE(0/0/response_messages/text/text)}" != ""]?Set(PROMPT=${RECOG_INSTANCE(0/0/response_messages/text/text)}))

exten => s,15,Verbose(1, got next prompt : ${PROMPT)})

exten => s,16,Set(GRAMMAR=builtin:speech/transcribe?${PARAMETERS})

exten => s,17,Goto(6)

exten => s,18,MRCPSynth(Thank you. See you next time!)

exten => s,19,Hangup

;================================UNIMRCPGOOGLEDIALOGFLOW-CX==============================

;=======================================================================================================================
;================================UNIMRCPAMAZONLEX==============================

;============================================triggering welcome event xml===========================================

[synthandrecog-lex-xml-event]

exten => s,1,Answer

exten => s,2,Set(MESSAGE=Hi Mike.Welcome to order flowers bot.How can i help you?)

exten => s,3,Set(PROMPT=)

exten => s,4,Set(GRAMMAR= builtin:speech/transcribe?${PARAMETERS})

exten => s,5,ExecIf($["${MESSAGE}" != ""]?Set(GRAMMAR=${GRAMMAR}message=${MESSAGE}))

exten => s,6,SynthAndRecog( ${PROMPT},${GRAMMAR},nif=json&plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni3_amazon)

exten => s,7,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,8,GotoIf($["${RECOG_STATUS}" = "OK"]?9:17)

exten => s,9,GotoIf($[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?10:17)

exten => s,10,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,11,Verbose(1, got session state: ${RECOG_INSTANCE(0/0/intentResult/sessionState/dialogAction/type)})

exten => s,12,GotoIf($["${RECOG_INSTANCE(0/0/intentResult/sessionState/dialogAction/type)}" = "Close"]?17:13)

exten => s,13,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/textResponse/messages/0/content})

exten => s,14,ExecIf($["${RECOG_INSTANCE(0/0/textResponse/messages/0/content)}" != ""]?Set(PROMPT=${RECOG_INSTANCE(0/0/textResponse/messages/0/content)}))

exten => s,15,Set(GRAMMAR=builtin:speech/transcribe?${PARAMETERS})

exten => s,16,Goto(6)

exten => s,17,MRCPSynth(Thank you. See you next time!)

exten => s,18,Hangup
[synthandrecog-lex-json-event-custom-parameters]

exten => s,1,Answer

exten => s,2,Set(MESSAGE="Hi Mike .Welcome to order flowers bot.How can i help you?")

exten => s,3,Set(PROMPT=)

exten => s,4,Set(GRAMMAR= builtin:speech/transcribe?${PARAMETERS})

exten => s,5,ExecIf($["${MESSAGE}" != ""]?Set(GRAMMAR=${GRAMMAR}message=${MESSAGE}))

exten => s,6,SynthAndRecog( ${PROMPT},${GRAMMAR},nif=json&plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni3_amazon)

exten => s,7,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,8,GotoIf($["${RECOG_STATUS}" = "OK"]?9:17)

exten => s,9,GotoIf($[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?10:17)

exten => s,10,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,11,Verbose(1, got session state: ${RECOG_INSTANCE(0/0/intentResult/sessionState/dialogAction/type)})

exten => s,12,GotoIf($["${RECOG_INSTANCE(0/0/intentResult/sessionState/dialogAction/type)}" = "Close"]?17:13)

exten => s,13,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/textResponse/messages/0/content})

exten => s,14,ExecIf($["${RECOG_INSTANCE(0/0/textResponse/messages/0/content)}" != ""]?Set(PROMPT=${RECOG_INSTANCE(0/0/textResponse/messages/0/content)}))

exten => s,15,Set(GRAMMAR=builtin:speech/transcribe?${PARAMETERS})

exten => s,16,Goto(6)

exten => s,17,MRCPSynth(Thank you. See you next time!)

exten => s,18,Hangup
;================================UNIMRCPAMAZONLEX==============================
;===================================================================================================
;================================UNIMRCPAZUREBOT==============================
[synthandrecog-azure]

exten => s,1,Answer

exten => s,2,Set(PROMPT="Welcome to Azure Echo bot. Say something i will repeat your phrase")

exten => s,3,SynthAndRecog(${PROMPT},"builtin:speech/transcribe?",plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni5-microsoft)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:11)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:11)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0)})

exten => s,9,Set(PROMPT=${RECOG_INSTANCE(0/0)})

exten => s,10,Goto(3)

exten => s,11,MRCPSynth(Thank you. See you next time!)

exten => s,12,Hangup



[send]
exten => s,1,ExecIf($["${ARG1}" = "1"]?SendDTMF(*3334445566*,300))
exten => s,2,ExecIf($["${ARG1}" = "4"]?SendText(internet))
exten => s,3,ExecIf($["${ARG1}" = "6"]?SendDTMF(*3334445566*,200))

[synthandrecog-azurebot-activity-payload-test]

exten => s,1,Answer

exten => s,2,Set(COUNT=0)

exten => s,3,Set(PROMPT="Welcome ")

exten => s,4,Set(METHOD="send-activity")

exten => s,5,Set(PAYLOAD="si")

exten => s,6,Set(GRAMMAR="builtin:speech/transcribe?tag-format=semantics/json\;method=${METHOD}")

exten => s,7,ExecIf($["${PAYLOAD}" != ""]?Set(GRAMMAR="builtin:speech/transcribe,builtin:dtmf/digits?tag-format=semantics/json\;method=${METHOD}\;payload-text=Trigger Event|${PAYLOAD}"))

exten => s,8,GoSub(send,s,1(${COUNT}))

exten => s,9,SynthAndRecog("${PROMPT}","${GRAMMAR}",plt-1&nif=json&b=1&sct=1000&sint=15000&nit=10000,spl=it-IT&p=azurebot)

exten => s,10,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,11,GotoIf($["${RECOG_STATUS}" = "OK"]?14:19)

exten => s,12,GotoIf($$[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?15:19)

exten => s,13,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,14,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/text)})

exten => s,15,Set(PROMPT=${RECOG_INSTANCE(0/0/text)})

exten => s,16,Set(COUNT=$[${COUNT} + 1])

exten => s,17,Set(METHOD="listen")

exten => s,18,Goto(5)

exten => s,19,MRCPSynth(Thank you. See you next time!)

exten => s,20,Hangup

[synthandrecog-azurebot-activity-payload]

exten => s,1,Answer

exten => s,2,Set(PROMPT=" ")

exten => s,3,Set(METHOD="send-activity")

exten => s,4,Set(PAYLOAD='weather')

exten => s,5,Set(GRAMMAR="builtin:speech/transcribe?activity-timeout=5000\;tag-format=semantics/json\;method=${METHOD}")

exten => s,6,ExecIf($["${PAYLOAD}" != ""]?Set(GRAMMAR="builtin:speech/transcribe?activity-timeout=5000\;tag-format=semantics/json\;method=${METHOD}\;payload-text=Trigger Event|${PAYLOAD}"))

exten => s,7,SynthAndRecog("${PROMPT}","${GRAMMAR}",plt-1&nif=json&b=1&sct=1000&sint=15000&nit=10000,spl=it-IT&p=azurebot)

exten => s,8,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,9,GotoIf($["${RECOG_STATUS}" = "OK"]?10:17)

exten => s,10,GotoIf($$[["${RECOG_COMPLETION_CAUSE}" = "000" ]|$[ "${RECOG_COMPLETION_CAUSE}" = "001"]|$["${RECOG_COMPLETION_CAUSE}" = "002"]]?11:17)

exten => s,11,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,12,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/text)})

exten => s,13,Set(PROMPT=${RECOG_INSTANCE(0/0/text)})

exten => s,14,Set(METHOD="listen")

exten => s,15,Set(PAYLOAD="") 

exten => s,16,Goto(5)

exten => s,17,MRCPSynth(Thank you. See you next time!)

exten => s,18,Hangup

[synthandrecog-azurebot-activity]

exten => s,1,Answer

exten => s,2,Set(PROMPT="Welcome ")

exten => s,3,Set(METHOD="listen")

exten => s,4,SynthAndRecog("${PROMPT}","builtin:speech/transcribe?initial-silence-timeout=3000\;end-silence-timeout=20000\;activity-timeout=11000\;segmentation-silence-timeout=5000\;tag-format=semantics/json\;method=${METHOD}",plt-1&nif=json&b=1&sct=5000&sint=15000&nit=15000&spl=en-US&p=azurebot)

exten => s,5,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,6,GotoIf($["${RECOG_STATUS}" = "OK"]?7:13)

exten => s,7,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?8:13)

exten => s,8,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,9,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/text)})

exten => s,10,Set(PROMPT=${RECOG_INSTANCE(0/0/text)})

exten => s,11,Set(METHOD="listen")

exten => s,12,Goto(4)

exten => s,13,MRCPSynth(Thank you. See you next time!,p=azurebot)

exten => s,14,Hangup



[synthandrecog-azurebot]

exten => s,1,Answer

exten => s,2,Set(PROMPT="Welcome ")

exten => s,3,SynthAndRecog("${PROMPT}","builtin:speech/transcribe?tag-format=semantics/json\;method=listen",plt-1&nif=json&b=1&sct=1000&sint=15000&nit=10000,spl=it-IT&p=azurebot)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:11)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:11)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,8,Verbose(1, got next prompt: ${RECOG_INSTANCE(0/0/text)})

exten => s,9,Set(PROMPT=${RECOG_INSTANCE(0/0/text)})

exten => s,10,Goto(3)

exten => s,11,MRCPSynth(Thank you. See you next time!)

exten => s,12,Hangup
;================================UNIMRCPAZUREBOT==============================
[synthandrecog-houndify-xml-bot]
exten => s,1,Answer
exten => s,2,Set(PROMPT=Welcome to speech transcription portal. Please speak.)
exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?)
exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})
exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:11)
exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "002"]?3:7)
exten => s,7,GotoIf($$[["${RECOG_COMPLETION_CAUSE}" = "000" ]|[ "${RECOG_COMPLETION_CAUSE}" = "001"]]?8:10)
exten => s,8,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})
exten => s,9,ExecIf($["${RECOG_INSTANCE(0/0/AllResults/0/SpokenResponseLong)}" != ""]?Set(PROMPT=You said: ${RECOG_INSTANCE(0/0/AllResults/0/SpokenResponseLong)}. Please speak))
exten => s,10,Goto(3)
exten => s,11,MRCPSynth(Thank you. See you next time!)
exten => s,12,Hangup
[synthandrecog-houndify-xml]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?,plt-1&b=1&sit=false&sct=1000&sint=20000&nit=5000&spl=en-US&p=unihoundify-sr)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:12)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:11)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

; exten => s,8,Verbose(1, all_present: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,8,Set(PROMPT=${RECOG_INSTANCE(0/0)})

exten => s,9,Goto(3)

exten => s,10,MRCPSynth(Thank you. See you next time!)

exten => s,11,Hangup



[synthandrecog-gsr-xml]

exten => s,1,Answer

exten => s,2,Set(PROMPT=welcome)

exten => s,3,SynthAndRecog(${PROMPT},builtin:speech/transcribe?,plt-1&b=1&sit=false&sct=1000&sint=20000&nit=5000&spl=en-US&p=uni2)

exten => s,4,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,5,GotoIf($["${RECOG_STATUS}" = "OK"]?6:12)

exten => s,6,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?7:11)

exten => s,7,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

; exten => s,8,Verbose(1, all_present: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,8,Set(PROMPT=${RECOG_INSTANCE(0/0)})

exten => s,9,Goto(3)

exten => s,10,MRCPSynth(Thank you. See you next time!)

exten => s,11,Hangup

[synthandrecog-trs-json]

exten => s,1,Answer
exten=> s,2,verbose(${SPYCHANNEL}) 
exten => s,3,Set(ACTION=start)
exten => s,4,agi(transcribe/dinamodb_v2.py)
exten => s,5,MRCPRecog(builtin:speech/transcribe?,sct=1000&sint=15000&nit=10000&spl=en-US&nif=json)
exten => s,6,Verbose(1, status: ${RECOGSTATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})
exten => s,7,GotoIf($["${RECOGSTATUS}" = "OK"]?8:13)
exten => s,8,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?9:13)
exten => s,9,Set(RECOGRESULT=${RECOG_RESULT})
exten => s,10,Set(ACTION=add_segment)
exten => s,11,agi(transcribe/dinamodb_v2.py)
exten => s,12,Goto(4)
exten => s,13,Hangup

[synthandrecog-transcribe-json]
exten=> s,1,Answer
exten=> s,2,agi(transcribe/agi_transcribe.py)
exten=> s,3,Hangup()

exten=>5000,1,Goto(hostcomm,s,1)
exten=>5001,1,Goto(hostcomm1,s,1)
exten=>5002,1,Goto(hostcomm2,s,1)
exten=>8004,1,Goto(arm,s,1)

exten =>8003,1,AGI(agi_lex.py)
exten =>8000,1,AGI(agi_dialogflow.py)
exten=>9999,1,Goto(synthandrecog-azurebot,s,1)



exten =>8009,1,AGI(agi_gdf_json.py) 
exten=>500,1,Dial(SIP/100,20)
exten=>501,1,Dial(SIP/101,20)
exten=>502,1,Dial(SIP/102,20)

exten=>506,1,Goto(context_54,s,1)
exten=>507,1,Goto(context_543,s,1)
exten=>600,1,Goto(context_5,s,1)
exten=>620,1,Goto(context_12,s,1)
exten=>622,1,Goto(context_13,s,1)
exten=>621,1,Goto(context_123,s,1)
;exten => _0[1-9].,1,GotoIfTime(6:00-18:00|mon-fri|*|*?ivr-lang,s,1)
exten => _0[1-9].,1,GotoIfTime(00:00-18:00|mon-fri|*|*?ivr-lang,s,1)
exten => _0[1-9].,n,GotoIfTime(10:00-17:00|sat|*|*?ivr-lang,s,1)
exten => _0[1-9].,n,Playback(closed)
exten => _0[1-9].,n,Playback(closed)
exten => _0[1-9].,n,Hangup()

exten=>5003,1,Goto(synthandrecog-gdf,s,1)
exten=>5004,1,Goto(synthandrecog-gdfcx,s,2)
[arm]
exten =>s,1,Answer
exten =>s,n,AGI(armtts.py)

[context_12]
exten =>s,1,Answer
exten =>s,n,agi(agi_lex.py)

[context_13]
exten =>s,1,Answer
exten =>s,n,agi(agi_dialogflow.py)
[context_123]
exten =>s,1,Answer
exten =>s,n,AGI(lex_perl.pl)
[context_4]

exten => s,1,Answer
exten => s,n,SynthAndRecog(Welcome to Asterisk please  choose youre language by saying one for english  two for russian,<?xml version=\"1.0\" encoding=\"utf-8\"?><grammar xmlns=\"http://www.w3.org/2001/06/grammar\" xml:lang=\"en-US\" version=\"1.0\" mode=\"voice\" root=\"test\"><rule id=\"digit\"><one-of><item>one</item><item>two</item><item>three</item></one-of></rule></grammar>,spl=en-US&p=uni3_amazon)
exten => s,n,GotoIf(${REGEX("one" ${RECOG_RESULT})}?one:if_2) 
exten => s,n(if_2),GotoIf(${REGEX("two" ${RECOG_RESULT})}?two:if_3) 
exten => s,n(if_3),GotoIf(${REGEX("three" ${RECOG_RESULT})}?three:error) 

exten => s,n(one),MRCPSynth(You called number one,Please say something,builtin:speech/transcribe,l=en-US&p=uni3_amazon)
same => n,MRCPSynth(Please say something,builtin:speech/transcribe,l=en-US&p=uni3_amazon)
exten => s,n,Hangup
exten => s,n(two),MRCPSynth(You called number two,l=en-US&p=uni3_amazon)
same => n,MRCPSynth(say something for  transcription,l=en-US&p=uni3_amazon)
exten => s,n,Hangup
exten => s,n(three),MRCPSynth(You called number three,l=en-US&p=uni3_amazon)
same => n,MRCPSynth(say something for  transcription,l=en-US&p=uni3_amazon)
exten => s,n,Hangup
same => n,MRCPSynth(say something for  transcription,l=en-US&p=uni3_amazon)
exten => s,n(error),MRCPSynth(sorry error with recognition,l=en-US&p=uni3_amazon) 
exten => s,n,Hangup



[context_54]
exten => s,1,Answer
exten => s,2,SynthAndRecog(Welcome to Asterisk Amazon OrderFlowers ,builtin:speech/transcribe?slots=[{SayDate}],spl=en-US&p=uni3_amazon)

exten => s,3,Goto(synthandrecog-output,s,1)
;exten => s,n,Hangup


[Hostcommm]
exten => 1234,1,Answer()

exten => 1234,n,Read(caller,,10)
exten => 1234,n,Set(CID=${CALLERID(num)})
exten => 1234,n,NoOp(${caller})
exten => 1234,n,Set(userCID=${caller})
exten => 1234,n,MYSQL(Connect connid YOUR_IP username pwd Database_name)
exten => 1234,n,MYSQL(Query resultid ${connid} select * from customer where caller='${userCID}')
exten => 1234,n,MYSQL(Fetch fetchid ${resultid} id name)
exten => 1234,n,SayAlpha(${name})
exten => 1234,n,Saydigits(${id})
exten => 1234,n,MYSQL(Clear ${resultid})
exten => 1234,n,MYSQL(Disconnect ${connid})
exten => 1234,n,Playback(vm-goodbye)


[hostcomm]
exten => s,1,Answer

exten => s,2,NoOp(${CALLERID(num)})

exten => s,3,Verbose(${CALLERID(num)})

exten => s,4,AGI(mysql.py,${CALLERID(num))

exten => s,5,NoOp(${name})

exten => s,6,Set(PROMPT= )

exten => s,7,Set(grammar= builtin:event/welcome?name=${name})

exten => s,8,SynthAndRecog( ${PROMPT},${grammar},project-id=dotted-virtue-233615,plt-1&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni_gdf)

exten => s,9,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,10,GotoIf($["${RECOG_STATUS}" = "OK"]?11:18)

exten => s,11,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?12:18)

exten => s,12,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,13,Verbose(1, all_required_params_present confidence: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,14,Set(PROMPT="${RECOG_INSTANCE(0/0/fulfillment_text)}")

exten => s,15,Set(grammar=builtin:speech/transcribe)

exten => s,16,Verbose(${RECOG_INSTANCE(0/0/fulfillment_text)})

exten => s,17,Goto(8)

exten => s,18,MRCPSynth(Thank you. See you next time!)

exten => s,19,Hangup


[hostcomm1]
exten => s,1,Answer
exten => s,2,NoOp(${CALLERID(num)})
exten => s,3,Verbose(${CALLERID(num)})
exten => s,4,AGI(mysql.py,${CALLERID(num))
exten => s,5,NoOp(${name})
exten => s,6,SynthAndRecog( ,builtin:event/welcome?name=${name},dotted-virtue-233615,spl=en-US&p=uni_gdf)
exten => s,n,Hangup



[hostcomm2]
exten => s,1,Answer

exten => s,2,NoOp(${CALLERID(num)})

exten => s,3,Verbose(${CALLERID(num)})

exten => s,4,AGI(mysql.py,${CALLERID(num))

exten => s,5,NoOp(${name})

exten => s,6,Set(PROMPT= )

exten => s,7,Set(grammar= builtin:event/welcome?name=${name})

exten => s,8,SynthAndRecog( ${PROMPT},${grammar},dotted-virtue-233615,plt=&b=1&sct=1000&sint=15000&nit=10000&spl=en-US&p=uni_gdf)

exten => s,9,Verbose(1, status: ${RECOG_STATUS}, completion-cause: ${RECOG_COMPLETION_CAUSE}, result: ${RECOG_RESULT})

exten => s,10,GotoIf($["${RECOG_STATUS}" = "OK"]?11:21)

exten => s,11,GotoIf($["${RECOG_COMPLETION_CAUSE}" = "000"]?12:21)

exten => s,12,Verbose(1, confidence: ${RECOG_CONFIDENCE(0)}, grammar: ${RECOG_GRAMMAR(0)}, input: ${RECOG_INPUT(0)}, instance: ${RECOG_INSTANCE(0/0)})

exten => s,13,Verbose(1, all_required_params_present confidence: ${RECOG_INSTANCE(0/0/all_required_params_present)})

exten => s,14,AGI(result.py,${RECOG_RESULT})

exten => s,15,NoOp(${RECOG})

exten => s,16,Set(PROMPT=${RECOG}})

exten => s,17,Set(grammar=builtin:speech/transcribe)

exten => s,18,Verbose(${RECOG_INSTANCE(0/0/fulfillment_text)})

exten => s,19,Goto(8)

exten => s,20,MRCPSynth(Thank you. See you next time!)

exten => s,21,Hangup







[context_543] 
exten => s,1,Answer
;exten => s,2,Monitor(wav,/root/myfilename,m)
exten => s,2,MRCPSynth(Hello!,builtin:speech/transcribe,spl=en-US&p=uni2)
exten => s,3,MRCPRecog(builtin:speech/transcribe,p=uni2&spl=en-US)
;exten => s,5,Playback(yourcallisimpotent_microsoft)
;exten => s,6,MRCPRecog(builtin:speech/transcribe,p=uni2&spl=en-US&f=/root/build-asterisk/testsounds/yourcallisimpotent_microsoft)
;exten => s,7,MRCPRecog(builtin:speech/transcribe,p=uni2&spl=en-US&f=/root/build-asterisk/testsounds/yourcallisimpotent_microsoft)
;exten => s,n,Hangup





[synthandrecog-app3]

exten => s,1,Answer

exten => s,n,SynthAndRecog(hello,"builtin:dtmf/digits,<?xml version=\"1.0\"?><grammar xmlns=\"http://www.w3.org/2001/06/grammar\" xml:lang=\"en-US\" version=\"1.0\" mode=\"voice\" tag-format=\"semantics/1.0-literals\" root=\"color\"><rule id=\"color\"><one-of><item>red</item><item>green</item><item>blue</item></one-of></rule></grammar>",t=5000&b=1&ct=0.7)

exten => s,n,Verbose(1, ${RECOG_STATUS}, ${RECOG_COMPLETION_CAUSE}, ${RECOG_RESULT})

exten => s,n,Hangup
































